<!DOCTYPE html>
<html lang="en">

<style>
    body {
        font-family: Arial, sans-serif;
        margin: 20px;
    }

    table {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 20px;
    }

    th,
    td {
        padding: 12px;
        border: 1px solid #dddddd;
        text-align: left;
    }

    th {
        background-color: #f2f2f2;
    }

    .order-details-body td {
        text-align: center;
    }

    .checkout-details td {
        text-align: right;
    }

    .checkout-details tr:first-child td {
        border-top: 2px solid #000;
    }

    .total-row td {
        font-weight: bold;
    }

    h6 {
        margin: 0;
    }

    @media screen and (max-width: 600px) {

        table,
        thead,
        tbody,
        th,
        td,
        tr {
            display: block;
        }

        tr {
            margin-bottom: 15px;
        }

        td {
            text-align: right;
            padding-left: 50%;
            position: relative;
        }

        td:before {
            content: attr(data-label);
            position: absolute;
            left: 0;
            padding-left: 10px;
            text-align: left;
            font-weight: bold;
        }
    }

    /* Basic table styles */
    .order-details {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 1em;
        font-family: Arial, sans-serif;
        background-color: #fff;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        border-radius: 8px;
        overflow: hidden;
    }
</style>

<%- include('../partials/head/head.ejs') %>

    <body>
        <%- include('../partials/header/header.ejs') %>

            <!-- breadcrumb-section -->
            <div class="breadcrumb-section breadcrumb-bg">
                <div class="container">
                    <div class="row">
                        <div class="col-lg-8 offset-lg-2 text-center">
                            <div class="breadcrumb-text">
                                <p>Fresh and Organic</p>
                                <h1>Check Out Product</h1>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- end breadcrumb section -->

            <div class="container mt-5">
                <div class="row">
                    <div class="col-lg-8">
                        <div class="checkout-accordion">
                            <div class="accordion" id="accordionExample">
                                <div class="card single-accordion">
                                    <div class="card-header" id="headingOne">
                                        <h5 class="mb-0">
                                            <button class="btn btn-link" type="button" data-toggle="collapse"
                                                data-target="#collapseAddress" aria-expanded="true"
                                                aria-controls="collapseAddress">
                                                My Address
                                            </button>
                                            <% if (addresses.length> 0) { %>
                                                <a class="pl-4" href="/address">Change Address</a>
                                                <% } %>
                                        </h5>
                                    </div>
                                    <div id="collapseAddress" class="collapse show" aria-labelledby="headingOne"
                                        data-parent="#accordionExample">
                                        <div class="card-body">
                                            <% if(addresses.length> 0){ %>
                                                <% addresses.forEach(address=> { %>

                                                    <label>
                                                        <input type="radio" name="selectedAddress"
                                                            value="<%= address._id %>" checked>
                                                        <span class="p-2">Name: <%= address.name.toUpperCase() %>
                                                        </span><br>
                                                        <span class="p-2">Phone No.: <%= address.phoneNumber %>
                                                        </span><br>
                                                        <span class="p-2">Home Address: <%= address.homeAddress %>
                                                        </span><br>
                                                        <span class="p-2">State: <%= address.state %></span>
                                                    </label>
                                                    <% })} else { %>

                                                        <h4>No address Found</h4>
                                                        <% } %>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="checkout-accordion-wrap mt-5">
                            <div class="accordion" id="accordionExample">
                                <div class="card single-accordion">
                                    <div class="card-header" id="headingTwo">
                                        <h5 class="mb-0">
                                            <button class="btn btn-link" type="button" data-toggle="collapse"
                                                data-target="#collapseBilling" aria-expanded="true"
                                                aria-controls="collapseBilling">
                                                Add New Address
                                            </button>
                                        </h5>
                                    </div>
                                    <div id="collapseBilling" class="collapse show" aria-labelledby="headingTwo"
                                        data-parent="#accordionExample">
                                        <div class="card-body">
                                            <div class="billing-address-form">
                                                <form id="addressForm" action="/add-address?path=checkout" method="post"
                                                    novalidate>
                                                    <input type="text" name="path" value="checkout" hidden>
                                                    <div class="form-group">
                                                        <input type="text" name="name" class="form-control"
                                                            placeholder="Name" required pattern="[A-Za-z\s]+"
                                                            title="Name should contain only letters and spaces">
                                                        <div class="error-message" id="name-error"></div>
                                                    </div>
                                                    <div class="form-group">
                                                        <input type="tel" name="phoneNumber" class="form-control"
                                                            placeholder="Phone" required pattern="\d{10}"
                                                            title="Phone number should be 10 digits long">
                                                        <div class="error-message" id="phone-error"></div>
                                                    </div>
                                                    <div class="form-group">
                                                        <input type="text" name="homeAddress" class="form-control"
                                                            placeholder="Home Address" required>
                                                        <div class="error-message" id="address-error"></div>
                                                    </div>
                                                    <div class="form-group">
                                                        <select name="country" id="country" class="form-control"
                                                            required>
                                                            <option value="">Select Country</option>
                                                            <option value="India">India</option>
                                                            <option value="USA">USA</option>
                                                        </select>
                                                        <div class="error-message" id="country-error"></div>
                                                    </div>
                                                    <div class="form-group">
                                                        <select name="city" id="city" class="form-control" required>
                                                            <option value="">Select City</option>
                                                        </select>
                                                        <div class="error-message" id="city-error"></div>
                                                    </div>
                                                    <div class="form-group">
                                                        <input type="text" name="state" class="form-control"
                                                            placeholder="State" required pattern="[A-Za-z\s]+"
                                                            title="State should contain only letters and spaces">
                                                        <div class="error-message" id="state-error"></div>
                                                    </div>
                                                    <div class="form-group">
                                                        <input type="number" name="pincode" class="form-control"
                                                            placeholder="Pincode" required pattern="\d{6}"
                                                            title="Pincode should be 6 digits long">
                                                        <div class="error-message" id="pincode-error"></div>
                                                    </div>
                                                    <div class="form-group">
                                                        <textarea name="bill" id="bill" class="form-control" cols="30"
                                                            rows="4" placeholder="Say Something"></textarea>
                                                    </div>
                                                    <button class="btn btn-dark" type="submit">ADD</button>
                                                </form>
                                            </div>
                                            <div>
                                                <button class="btn btn-success" onclick="history.back()">Go
                                                    Back</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-4">
                        <div class="order-details-wrap">
                            <table class="order-details">
                                <thead>
                                    <tr>
                                        <th colspan="6">Your Order Details</th>
                                    </tr>
                                    <tr>
                                        <th>Product</th>
                                        <th>Quantity</th>
                                        <th colspan="1">Price</th>
                                        <th>Total</th>
                                    </tr>
                                </thead>
                                <tbody class="order-details-body">
                                    <% cartDatas.items.forEach(product=> { %>
                                        <tr>
                                            <td data-label="Product">
                                                <%= product.productId.name %>
                                            </td>
                                            <td data-label="Quantity">
                                                <%= product.quantity %>
                                            </td>
                                            <td data-label="Price">₹<%= product.productId.discount_price.toFixed(2) %>
                                            </td>
                                            <td data-label="Total">
                                                ₹ <%= product.productId.discount_price.toFixed(2) * product.quantity %>
                                            </td>
                                        </tr>
                                        <% }) %>
                                </tbody>
                                <tbody class="checkout-details">
                                    <tr>
                                        <td colspan="3">Shipping</td>
                                        <td><del>₹45.00</del>
                                            <p>Free Delivery</p>
                                        </td>
                                    </tr>
                                    <% if (cartDatas.couponDiscount) { %>
                                        <tr class="total-row">
                                            <td colspan="3">Coupon Discount</td>
                                            <td><span id="couponDiscount">
                                                    <%= cartDatas.couponDiscount %>
                                                </span> %
                                                <button name="" style="width: 6rem;height: auto;font-weight: bolder;"
                                                    onclick="removeCoupon()" id=""
                                                    class="btn btn-danger">Remove</button>
                                            </td>
                                        </tr>
                                        <% }else {%>
                                            <span id="couponDiscount" hidden></span>
                                            <% } %>

                                                <tr class="total-row">
                                                    <td colspan="2" class="mt-5 pt-4">Gross Total
                                                        <% if (cartDatas.couponDiscount) { %>
                                                            <br><br><br>

                                                            Coupon Code :
                                                            <% } %>

                                                    </td>

                                                    <% if (cartDatas.couponDiscount) { %>
                                                        <td colspan="2">
                                                            <del>₹<%= totalPrice.toFixed(2) %></del>
                                                            <br>

                                                            ₹<span id="totalPrice">
                                                                <%= cartDatas.totalPrice.toFixed(2) %>
                                                            </span>
                                                            <br><br>
                                                            <h6>Coupon Applied</h6>


                                                            <span id="couponCode">
                                                                <%= cartDatas.couponCode %>
                                                            </span>

                                                        </td>
                                                        <% } else { %>
                                                            <td colspan="2">₹<span id="totalPrice" aria-disabled="true">
                                                                    <%= cartDatas.totalPrice.toFixed(2) %>
                                                                </span></td>
                                                            <% } %>
                                                </tr>
                                </tbody>
                            </table>
                            <div class="coupon-form-wrap">

                                <% if (wallet) { %>

                                    <h6>Wallet Balance : Rs <span id="wallet">
                                            <%= wallet.walletAmount.toFixed(2) %>
                                                <% }else {%>
                                                    Wallet balance is Empty
                                                    <span id="wallet" hidden></span>
                                                    <% } %>
                                        </span> </h6>

                            </div>
                            <% if (!cartDatas.couponDiscount) { %>
                                <div class="coupon-section">
                                    <h4>Apply Coupon</h4>
                                    <div class="coupon-form-wrap">
                                        <p><input type="text" placeholder="Coupon" id="couponCode" required>
                                            <input value="Apply" type="submit" onclick="applyCoupon()">
                                        </p>
                                    </div>
                                </div>
                                <% } %>
                                    <div class="container mt-5 mb-5">
                                        <div class="card">
                                            <div class="card-body">
                                                <h3 class="card-title">Select Payment Method</h3>
                                                <div class="mt-4">
                                                    <button id="pay-button" class="btn btn-primary btn-block">Pay with
                                                        Razorpay</button>
                                                </div>
                                                <div class="mt-3">
                                                    <button onclick="proceedToPayment()"
                                                        class="btn btn-secondary btn-block">Pay with Cash
                                                        on Delivery</button>
                                                </div>
                                                <div class="mt-3">
                                                    <button onclick="paymentUsingWallet()"
                                                        class="btn btn-dark btn-block">Pay with Wallet</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                        </div>
                    </div>
                </div>
            </div>
            <br><br>

            <%- include('../partials/footer/footer.ejs') %>



                <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
                <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

                <script>

                    document.addEventListener('DOMContentLoaded', function () {
                        const form = document.getElementById('addressForm');
                        const nameInput = document.querySelector('input[name="name"]');
                        const phoneInput = document.querySelector('input[name="phoneNumber"]');
                        const addressInput = document.querySelector('input[name="homeAddress"]');
                        const countrySelect = document.getElementById('country');
                        const citySelect = document.getElementById('city');
                        const stateInput = document.querySelector('input[name="state"]');
                        const pincodeInput = document.querySelector('input[name="pincode"]');

                        form.addEventListener('submit', function (event) {
                            const errors = {};

                            if (!nameInput.validity.valid) {
                                errors.name = 'Name should contain only letters and spaces.';
                            }

                            if (!phoneInput.validity.valid) {
                                errors.phone = 'Phone number should be 10 digits long.';
                            }

                            if (!addressInput.validity.valid) {
                                errors.address = 'Please provide a valid home address.';
                            }

                            if (!countrySelect.validity.valid) {
                                errors.country = 'Please select a country.';
                            }

                            if (!citySelect.validity.valid) {
                                errors.city = 'Please select a city.';
                            }

                            if (!stateInput.validity.valid) {
                                errors.state = 'State should contain only letters and spaces.';
                            }

                            if (!pincodeInput.validity.valid) {
                                errors.pincode = 'Pincode should be 6 digits long.';
                            }

                            showErrors(errors);
                            if (Object.keys(errors).length > 0) {
                                event.preventDefault();
                            }
                        });

                        function showErrors(errors) {
                            const errorElements = {
                                name: document.getElementById('name-error'),
                                phone: document.getElementById('phone-error'),
                                address: document.getElementById('address-error'),
                                country: document.getElementById('country-error'),
                                city: document.getElementById('city-error'),
                                state: document.getElementById('state-error'),
                                pincode: document.getElementById('pincode-error')
                            };

                            Object.keys(errors).forEach(field => {
                                const errorElement = errorElements[field];
                                if (errorElement) {
                                    errorElement.textContent = errors[field];
                                }
                            });

                            // Clear previous error messages
                            Object.keys(errorElements).forEach(field => {
                                const errorElement = errorElements[field];
                                if (!errors[field] && errorElement) {
                                    errorElement.textContent = '';
                                }
                            });
                        }
                        const citiesByCountry = {
                            India: ["Delhi", "Mumbai", "Bangalore", "Chennai"],
                            USA: ["New York", "Los Angeles", "Chicago", "Houston"]
                        };

                        countrySelect.addEventListener('change', function () {
                            const selectedCountry = this.value;
                            citySelect.innerHTML = '<option value="">Select City</option>';
                            if (selectedCountry && citiesByCountry[selectedCountry]) {
                                citiesByCountry[selectedCountry].forEach(city => {
                                    const option = document.createElement('option');
                                    option.value = city;
                                    option.textContent = city;
                                    citySelect.appendChild(option);
                                });
                            }
                        });

                        pincodeInput.addEventListener('input', function () {
                            const pincode = this.value;
                            console.log(pincode, 'hello');
                            const pincodeError = document.getElementById('pincode-error');
                            if (pincode.length !== 6) {
                                pincodeError.textContent = 'Pincode should be 6 digits long.';
                            } else {
                                pincodeError.textContent = '';
                            }

                            // Example of auto-filling based on pincode. Replace with actual API call if necessary.
                            if (pincode.length === 6) {
                                if (pincode === '110001') {
                                    stateInput.value = 'Delhi';
                                    citySelect.innerHTML = '<option value="Delhi">Delhi</option>';
                                    homeAddressInput.value = 'Connaught Place';
                                } else if (pincode === '400001') {
                                    stateInput.value = 'Maharashtra';
                                    citySelect.innerHTML = '<option value="Mumbai">Mumbai</option>';
                                    homeAddressInput.value = 'Fort';
                                }
                            }
                        });


                        document.getElementById('addressForm').addEventListener('submit', function (event) {
                            const form = event.target;
                            if (!form.checkValidity()) {
                                event.preventDefault();
                                event.stopPropagation();
                                Swal.fire('Please fill out the form correctly.');
                            }
                            form.classList.add('was-validated');
                        });
                    })
                </script>
                <script>

                    const addressStr = `<%- JSON.stringify(addresses)  %>`
                    const address = JSON.parse(addressStr)
                    console.log(address, 'address is showing');
                    console.log(typeof address.length, 'length is showing');
                    console.log(address.length > 0, 'hjehe');
                    async function paymentUsingWallet() {
                        console.log(address.length > 0);
                        if (address.length > 0) {
                            const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked').value;
                            console.log(selectedAddress, 'ehehe');
                            const couponDiscount = document.getElementById('couponDiscount').innerHTML
                            console.log(couponDiscount, 'which one');
                            const wallet = document.getElementById('wallet').innerHTML
                            console.log(wallet, 'wallet is shwoing');
                            const total = document.getElementById('totalPrice').innerHTML
                            console.log(total, 'total is shwoing');
                            const walletAmount = Number(wallet)
                            const totalPrice = Number(total)

                            console.log(totalPrice);
                            console.log(wallet, 'wallet');
                            if (totalPrice <= walletAmount) {
                                const paymentMethod = 'Wallet'
                                await fetch(`/wallet-payment/?totalPrice=${totalPrice}`, {
                                    method: 'GET',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    }
                                }).then(response => response.ok ? response.json() : console.log('Network error'))
                                    .then((data) => {
                                        if (data.result === 'success')
                                            walletPayment()
                                    }).catch(err => {
                                        console.log('Error:', err);
                                    });
                                async function walletPayment() {
                                    await fetch(`/order-add/?paymentMethod=${paymentMethod}&address=${selectedAddress}&couponDiscount=${couponDiscount}`, {
                                        method: 'GET',
                                        headers: { 'Content-Type': 'application/json' }
                                    }).then(response => response.ok ? response.json() : console.log('Network error'))
                                        .then((data) => {
                                            if (data.result === 'success')
                                                window.location.href = '/order-placed';
                                        }).catch(err => {
                                            console.log('Error:', err);
                                        });
                                }

                            } else {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Insufficient Funds',
                                    text: 'You have insufficient funds in your wallet. Please update your wallet amount.'
                                });
                            }
                        } else {
                            Swal.fire({
                                icon: 'warning',
                                title: 'Address Not Found',
                                text: 'To proceed, please add your address.'
                            });
                        }
                    }

                </script>

                <script>
                    async function removeCoupon() {

                        const totalPrice = document.getElementById('totalPrice').innerHTML
                        const couponDiscount = document.getElementById('couponDiscount').innerHTML
                        await fetch(`/remove-coupon/?totalPrice=${totalPrice}&couponDiscount=${couponDiscount}`, {
                            method: 'DELETE',
                            headers: {
                                'Content-Type': 'application/json'
                            }
                        }).then(response => {
                            if (!response.ok) {
                                throw new Error('Some error occured while removing the coupon using fetch')
                            }
                            return response.json()
                        }).then(data => {
                            if (data.result === 'success') {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Coupon Removed Successfully',
                                    text: 'Your coupon has been successfully removed.'
                                }).then(() => {
                                    location.reload();
                                });

                            } else {
                                Swal.fire('Some issue encountered')
                            }
                        }).catch(err => {
                            console.log(err, 'Some error occured while try to remove coupon in checkout page');
                        })
                    }
                </script>
                <script>
                    async function applyCoupon() {
                        const couponCode = document.getElementById('couponCode').value
                        const couponDiscount = document.getElementById('couponDiscount').innerHTML
                        console.log(couponCode, 'coupon code is showing');
                        console.log(couponDiscount, 'coupon discount is showing');
                        if (couponCode && !couponDiscount) {
                            const totalCartPriceData = document.getElementById('totalPrice')
                            const totalCartPrice = Number(totalCartPriceData.innerHTML)
                            console.log(totalCartPrice, 'totalcart price is showing');
                            const response = await fetch(`/apply-coupon/?couponCode=${couponCode}&totalCartPrice=${totalCartPrice}`, {
                                method: 'GET',
                                headers: {
                                    'Content-Type': 'application/json'
                                }
                            })
                                .then(response => {
                                    if (!response.ok) {
                                        throw new Error('Some error occured while fetching')
                                    }
                                    return response.json()
                                })
                                .then(data => {
                                    if (data.result === 'Invalid Coupon') {
                                        Swal.fire({
                                            icon: 'error',
                                            title: 'Invalid Coupon',
                                            text: 'The coupon code you entered is invalid. Please double-check and try again.'
                                        });
                                    } else if (data.result === 'Coupon Not Found') {
                                        Swal.fire({
                                            icon: 'error',
                                            title: 'Coupon Not Found',
                                            text: 'The coupon code you entered does not match any available coupons.'
                                        });
                                    } else if (data.result === 'Coupon Expired') {
                                        Swal.fire({
                                            icon: 'error',
                                            title: 'Coupon Expired',
                                            text: 'Sorry, the coupon you are trying to use has expired.'
                                        });
                                    } else if (data.result === 'Coupon Status Archived') {
                                        Swal.fire({
                                            icon: 'info',
                                            title: 'Coupon Status Changed',
                                            text: 'The coupon you applied is no longer available. Please try another coupon code.'
                                        });
                                    } else if (data.result === 'Cart Limit Is Low') {
                                        Swal.fire({
                                            title: 'Minimum Cart Total Required',
                                            text: `To apply this coupon, the minimum cart total must be ${data.amount}`,
                                            icon: 'info',
                                            confirmButtonText: 'OK'
                                        });
                                    } else if (data.result === 'Coupon Applied') {
                                        Swal.fire({
                                            icon: 'success',
                                            title: 'Coupon Applied Successfully',
                                            text: 'The coupon has been applied successfully!',
                                            showConfirmButton: false,
                                            timer: 1500,
                                        }).then(() => {
                                            location.reload();
                                        });
                                        const discount = Number(data.discount);
                                        console.log(discount, 'discount is applied');
                                        totalCartPriceData.innerHTML = totalCartPrice - (totalCartPrice * (discount / 100));
                                    } else if (data.result === 'Coupon Already Exist') {
                                        Swal.fire({
                                            icon: 'warning',
                                            title: 'Coupon Already Used',
                                            text: 'This coupon has already been applied. Please try another coupon.'
                                        });
                                    }

                                })
                        } else if (couponDiscount) {
                            Swal.fire({
                                icon: 'warning',
                                title: 'Coupon Already Applied',
                                text: 'You have already applied a coupon. Only one coupon can be applied per order.'
                            });
                        } else {
                            Swal.fire({
                                icon: 'info',
                                title: 'Enter Coupon Code',
                                text: 'Please enter a valid coupon code to apply.'
                            });
                        }


                    }
                </script>
                <script>

                    document.getElementById('pay-button').addEventListener('click', async function (e) {
                        e.preventDefault();
                        if (address.length > 0) {
                            const amount = document.getElementById('totalPrice').innerHTML;
                            console.log(amount, 'amount is showing');
                            const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked').value;
                            const couponDiscount = document.getElementById('couponDiscount').innerHTML;
                            const couponCode = document.getElementById('couponCode').innerHTML;
                            console.log(couponCode, 'coupon Code is showing');
                            console.log(couponDiscount, 'coupon discount is showing');
                            console.log(selectedAddress, 'selectedAddress is showing');
                            try {
                                console.log('razorpay is working');
                                const response = await fetch(`/razorpay-payment`, {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    },
                                    body: JSON.stringify({ amount: amount.trim() })
                                });

                                if (!response.ok) {
                                    throw new Error('Failed to create order');
                                }
                                console.log(response, 'response is showing ===================');

                                const order = await response.json();
                                console.log(order, 'order is showing');
                                const options = {
                                    key: 'rzp_test_z4DsvrzZurRdYX',
                                    amount: order.amount,
                                    currency: order.currency,
                                    order_id: order.id,
                                    name: 'Your Company Name',
                                    description: 'Test Payment',
                                    image: 'https://via.placeholder.com/150',
                                    handler: function (response) {
                                        console.log(response, 'response is showing');
                                        Swal.fire({
                                            title: 'Payment Successful!',
                                            html: `<p>Payment ID: <strong>${response.razorpay_payment_id}</strong></p>
                                                   <p>Amount: <strong>${order.amount / 100}</strong> ${order.currency}</p>`,
                                            icon: 'success',
                                            timer: 3500,

                                        }).then(() => {
                                            razorpaySuccess(response.razorpay_payment_id);
                                        });
                                    },
                                    prefill: {
                                        name: 'John Doe',
                                        email: 'john.doe@example.com',
                                        contact: '1234567890'
                                    },
                                    theme: {
                                        color: '#528FF0'
                                    }
                                };

                                const razorpayInstance = new Razorpay(options);
                                razorpayInstance.on('payment.failed', function (response) {
                                    console.log(response.error, 'Payment failed');
                                    fetch('/payment-failed-handler', {
                                        method: 'POST',
                                        headers: {
                                            'Content-Type': 'application/json'
                                        },
                                        body: JSON.stringify({
                                            amount: amount.trim(),
                                            paymentMethod: 'Online Payment',
                                            address: selectedAddress,
                                            couponDiscount: couponDiscount,
                                            couponCode: couponCode
                                        })
                                    })
                                        .then(() => {
                                            window.location.href = '/payment-failed-page';
                                        })
                                        .catch(err => {
                                            console.error('Error handling payment failure:', err);
                                            window.location.href = '/payment-failed-page';
                                        });
                                });

                                razorpayInstance.open();

                                async function razorpaySuccess(paymentId) {
                                    const paymentMethod = 'Online Payment';
                                    await fetch(`/order-add/?paymentMethod=${paymentMethod}&paymentId=${paymentId}&address=${selectedAddress}&couponDiscount=${couponDiscount}&couponCode=${couponCode}`, {
                                        method: 'GET',
                                        headers: { 'Content-Type': 'application/json' }
                                    }).then(response => response.ok ? response.json() : console.log('Network error'))
                                        .then((data) => {
                                            if (data.result === 'success')
                                                window.location.href = '/order-placed';
                                        }).catch(err => {
                                            console.log('Error:', err);
                                        });
                                }
                            } catch (error) {
                                console.error('Error:', error);
                                alert('Failed to create order');
                            }
                        } else {
                            Swal.fire({
                                icon: 'warning',
                                title: 'Address Not Found',
                                text: 'To proceed, please add your address.'
                            });
                        }
                    });



                    function proceedToPayment() {
                        const totalPriceStr = document.getElementById('totalPrice').innerHTML
                        const totalPrice = Number(totalPriceStr)
                        console.log(totalPrice);

                        if (address.length > 0) {
                            if (totalPrice <= 1000) {
                                orderPlace();
                            } else {
                                Swal.fire({
                                    icon: 'info',
                                    title: 'Cash on Delivery Limit Exceeded',
                                    text: 'Cash on Delivery is available only for orders under Rs. 1000.'
                                });
                            }
                        } else {
                            Swal.fire({
                                icon: 'warning',
                                title: 'Address Not Found',
                                text: 'To proceed, please add your address.'
                            });
                        }

                    }

                    async function orderPlace() {
                        const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked').value;
                        const couponDiscount = document.getElementById('couponDiscount').innerHTML

                        const paymentMethod = 'cash on delivery'
                        await fetch(`/order-add/?paymentMethod=${paymentMethod}&address=${selectedAddress}&couponDiscount=${couponDiscount}`, {
                            method: 'GET',
                            headers: { 'Content-Type': 'application/json' }
                        }).then(response => response.ok ? response.json() : console.log('Network error'))
                            .then((data) => {
                                if (data.result === 'success')
                                    window.location.href = '/order-placed';
                            }).catch(err => {
                                console.log('Error:', err);
                            });
                    }
                </script>
    </body>

</html>
